{"version":3,"sources":["components/TodoList/TodoList.jsx","components/CurrentUser/CurrentUser.jsx","api.js","App.jsx","index.js"],"names":["TodoList","todos","checkboxChange","selectedTodoId","handleClick","todoFilter","todoFilterComplete","className","type","onChange","event","target","value","placeholder","map","todo","key","id","completed","checked","onClick","readOnly","title","classNames","userId","CurrentUser","user","clear","name","email","phone","url","getTodos","fetch","then","response","json","data","getUser","App","state","prevTodos","selectedUserId","undefined","currentUser","filter","componentDidMount","a","setState","componentDidUpdate","updateUser","todoFilterText","text","includes","this","filteredTodos","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a4364e44.chunk.js","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  checkboxChange,\n  selectedTodoId,\n  handleClick,\n  todoFilter,\n  todoFilterComplete,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <input\n      type=\"text\"\n      onChange={event => todoFilter(event.target.value)}\n      placeholder=\"Search todo\"\n    />\n    <select\n      onChange={event => todoFilterComplete(event.target.value)}\n    >\n      <option\n        value=\"all\"\n      >\n        All\n      </option>\n      <option\n        value=\"completed\"\n      >\n        Completed\n      </option>\n      <option\n        value=\"active\"\n      >\n        Active\n      </option>\n    </select>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={todo.completed\n              ? 'TodoList__item TodoList__item--checked'\n              : 'TodoList__item TodoList__item--unchecked'}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onClick={() => checkboxChange(todo.id)}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n            <button\n              className={classNames('TodoList__user-button',\n                'button',\n                { 'TodoList__user-button--selected':\n                selectedTodoId === todo.id })\n              }\n              type=\"button\"\n              onClick={() => handleClick(todo.userId, todo.id)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n          /* <li className=\"TodoList__item TodoList__item--unchecked\">\n              <label>\n                <input type=\"checkbox\" readOnly />\n                <p>delectus aut autem</p>\n              </label>\n\n              <button\n                className=\"\n                  TodoList__user-button\n                  TodoList__user-button--selected\n                  button\n                \"\n                type=\"button\"\n              >\n                User&nbsp;#1\n              </button>\n            </li>\n\n            <li className=\"TodoList__item TodoList__item--checked\">\n              <label>\n                <input type=\"checkbox\" checked readOnly />\n                <p>distinctio vitae autem nihil ut molestias quo</p>\n              </label>\n\n              <button\n                className=\"TodoList__user-button button\"\n                type=\"button\"\n              >\n                User&nbsp;#2\n              </button>\n            </li> */\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  checkboxChange: PropTypes.func.isRequired,\n};\n","/* eslint-disable react/prop-types */\nimport React from 'react';\nimport './CurrentUser.scss';\n\nexport const CurrentUser = ({ user, clear }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user :&nbsp;\n        {user.id}\n      </span>\n    </h2>\n\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n    <button\n      type=\"button\"\n      onClick={() => clear()}\n    >\n      Clear\n    </button>\n  </div>\n);\n","const url = 'https://mate-api.herokuapp.com';\n\nexport const getTodos = () => fetch(`${url}/todos`)\n  .then(response => response.json())\n  .then(todos => todos.data);\n\nexport const getUser = userId => fetch(`${url}/users/${userId}`)\n  .then(response => response.json());\n","/* eslint-disable react/no-did-update-set-state */\n/* eslint-disable react/no-unused-state */\n/* eslint-disable react/no-access-state-in-setstate */\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos, getUser } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    prevTodos: [],\n    selectedUserId: undefined,\n    selectedTodoId: null,\n    currentUser: {},\n    filter: 'all',\n  };\n\n  componentDidMount = async() => {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.filter(todo => todo.title && todo.id && todo.userId),\n    });\n  }\n\n  componentDidUpdate = async() => {\n    if (this.state.currentUser.id !== this.state.selectedUserId) {\n      const user = await getUser(this.state.selectedUserId);\n\n      this.updateUser(user.data);\n    }\n  }\n\n  checkboxChange = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === +id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return { ...todo };\n      }),\n    }));\n  }\n\n  handleClick = (selectedUserId, selectedTodoId) => {\n    this.setState({\n      selectedUserId,\n      selectedTodoId,\n    });\n  }\n\n  updateUser = (currentUser) => {\n    this.setState({ currentUser });\n  }\n\n  clear = () => {\n    this.setState({\n      selectedUserId: undefined,\n      selectedTodoId: null,\n      currentUser: {},\n    });\n  }\n\n  todoFilterText = async(text) => {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.filter(todo => (\n        todo.title && todo.title.includes(text))),\n    });\n  }\n\n  todoFilterComplete = (filter) => {\n    this.setState({ filter });\n  }\n\n  render() {\n    const { todos,\n      selectedUserId,\n      selectedTodoId,\n      currentUser,\n      filter } = this.state;\n\n    let filteredTodos = [];\n\n    if (filter) {\n      if (filter === 'all') {\n        filteredTodos = todos;\n      } else if (filter === 'completed') {\n        filteredTodos = todos.filter(todo => todo.completed);\n      } else if (filter === 'active') {\n        filteredTodos = todos.filter(todo => !todo.completed);\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodos}\n            checkboxChange={this.checkboxChange}\n            selectedUserId={selectedUserId}\n            selectedTodoId={selectedTodoId}\n            handleClick={this.handleClick}\n            todoFilter={this.todoFilterText}\n            todoFilterComplete={this.todoFilterComplete}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={currentUser}\n                clear={this.clear}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}