{"version":3,"sources":["components/TodoList/TodoList.jsx","api.js","components/CurrentUser/CurrentUser.jsx","App.jsx","index.js"],"names":["TodoList","todos","checkboxChange","selectedTodoId","handleClick","todoFilter","todoFilterComplete","className","type","onChange","event","target","value","placeholder","map","todo","key","id","completed","checked","onClick","readOnly","title","classNames","userId","defaultProps","url","getTodos","fetch","then","response","json","data","getUser","CurrentUser","state","currentUser","componentDidMount","a","props","selectedUserId","user","updateUser","componentDidUpdate","prevProps","setState","clear","this","name","email","phone","React","Component","App","filter","undefined","todoFilterText","text","includes","filteredTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ca050d78.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nexport const TodoList = ({\n  todos,\n  checkboxChange,\n  selectedTodoId,\n  handleClick,\n  todoFilter,\n  todoFilterComplete,\n}) => (\n  <div className=\"TodoList\">\n    <h2>Todos:</h2>\n    <input\n      type=\"text\"\n      onChange={event => todoFilter(event.target.value)}\n      placeholder=\"Search todo\"\n    />\n    <select\n      onChange={event => todoFilterComplete(event.target.value)}\n    >\n      <option\n        value=\"all\"\n      >\n        All\n      </option>\n      <option\n        value=\"completed\"\n      >\n        Completed\n      </option>\n      <option\n        value=\"active\"\n      >\n        Active\n      </option>\n    </select>\n    <div className=\"TodoList__list-container\">\n      <ul className=\"TodoList__list\">\n        {todos.map(todo => (\n          <li\n            key={todo.id}\n            className={todo.completed\n              ? 'TodoList__item TodoList__item--checked'\n              : 'TodoList__item TodoList__item--unchecked'}\n          >\n            <label>\n              <input\n                type=\"checkbox\"\n                checked={todo.completed}\n                onClick={() => checkboxChange(todo.id)}\n                readOnly\n              />\n              <p>{todo.title}</p>\n            </label>\n            <button\n              className={classNames('TodoList__user-button',\n                'button',\n                { 'TodoList__user-button--selected':\n                selectedTodoId === todo.id })\n              }\n              type=\"button\"\n              onClick={() => handleClick(todo.userId, todo.id)}\n            >\n              User&nbsp;#\n              {todo.userId}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(\n    PropTypes.shape({}).isRequired,\n  ).isRequired,\n  checkboxChange: PropTypes.func.isRequired,\n  handleClick: PropTypes.func.isRequired,\n  todoFilter: PropTypes.func.isRequired,\n  todoFilterComplete: PropTypes.func.isRequired,\n  selectedTodoId: PropTypes.number,\n};\n\nTodoList.defaultProps = {\n  selectedTodoId: '',\n};\n","const url = 'https://mate-api.herokuapp.com';\n\nexport const getTodos = () => fetch(`${url}/todos`)\n  .then(response => response.json())\n  .then(todos => todos.data);\n\nexport const getUser = userId => fetch(`${url}/users/${userId}`)\n  .then(response => response.json());\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './CurrentUser.scss';\nimport { getUser } from '../../api';\n\nexport class CurrentUser extends React.Component {\n  state = {\n    currentUser: {},\n  }\n\n  componentDidMount = async() => {\n    const user = await getUser(this.props.selectedUserId);\n\n    if (user.data) {\n      this.updateUser(user.data);\n    }\n  }\n\n  componentDidUpdate = async(prevProps) => {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      const user = await getUser(this.props.selectedUserId);\n\n      if (user.data) {\n        this.updateUser(user.data);\n      }\n    }\n  }\n\n  updateUser = (currentUser) => {\n    this.setState({ currentUser });\n  }\n\n  render() {\n    const { clear } = this.props;\n    const { currentUser } = this.state;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user :&nbsp;\n            {currentUser.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{currentUser.name}</h3>\n        <p className=\"CurrentUser__email\">{currentUser.email}</p>\n        <p className=\"CurrentUser__phone\">{currentUser.phone}</p>\n        <button\n          type=\"button\"\n          onClick={() => clear()}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n\nCurrentUser.propTypes = {\n  clear: PropTypes.func.isRequired,\n  selectedUserId: PropTypes.number.isRequired,\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { getTodos } from './api';\n\nclass App extends React.Component {\n  state = {\n    todos: [],\n    selectedUserId: 0,\n    selectedTodoId: null,\n    filter: 'all',\n  };\n\n  componentDidMount = async() => {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.filter(todo => todo.title && todo.id && todo.userId),\n    });\n  }\n\n  checkboxChange = (id) => {\n    this.setState(state => ({\n      todos: state.todos.map((todo) => {\n        if (todo.id === +id) {\n          return {\n            ...todo,\n            completed: !todo.completed,\n          };\n        }\n\n        return { ...todo };\n      }),\n    }));\n  }\n\n  handleClick = (selectedUserId, selectedTodoId) => {\n    this.setState({\n      selectedUserId,\n      selectedTodoId,\n    });\n  }\n\n  clear = () => {\n    this.setState({\n      selectedUserId: undefined,\n      selectedTodoId: null,\n    });\n  }\n\n  todoFilterText = async(text) => {\n    const todos = await getTodos();\n\n    this.setState({\n      todos: todos.filter(todo => (\n        todo.title && todo.title.includes(text))),\n    });\n  }\n\n  todoFilterComplete = (filter) => {\n    this.setState({ filter });\n  }\n\n  render() {\n    const { todos,\n      selectedUserId,\n      selectedTodoId,\n      filter } = this.state;\n\n    let filteredTodos = [];\n\n    if (filter) {\n      if (filter === 'all') {\n        filteredTodos = todos;\n      } else if (filter === 'completed') {\n        filteredTodos = todos.filter(todo => todo.completed);\n      } else if (filter === 'active') {\n        filteredTodos = todos.filter(todo => !todo.completed);\n      }\n    }\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            todos={filteredTodos}\n            checkboxChange={this.checkboxChange}\n            selectedUserId={selectedUserId}\n            selectedTodoId={selectedTodoId}\n            handleClick={this.handleClick}\n            todoFilter={this.todoFilterText}\n            todoFilterComplete={this.todoFilterComplete}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                clear={this.clear}\n                selectedUserId={selectedUserId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}